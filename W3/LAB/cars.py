
#!/usr/bin/env python3

import json
import locale
import sys
from reports import generate as report
from emails import generate as email_generate
from emails import send as email_send
def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data

#Step 3
def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])

#Step 2 
def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"total_sales":0}
  car_years={}
  #for loop from data to item one on one
  
  #item = {"id":key,"car":}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    # print(type(item)) # from car_sales.json 
    item_price = locale.atof(item["price"].strip("$"))#locale.atof(string, func=float) strip remove $
    
    # total sales value
    item_revenue = item["total_sales"] * item_price
    # if A > B
    if item_revenue > max_revenue["revenue"]:
      # print('max_revenue["revenue"] is ',max_revenue["revenue"])
      # A = A
      item["revenue"] = item_revenue
      # B = A
      max_revenue = item
      
    # TODO: also handle max sales

    if item["total_sales"] > max_sales["total_sales"]:
      # print('item["total_sales"] is ',item["total_sales"])
      max_sales = item
      # print('max_sales is',max_sales)
      
    # TODO: also handle most popular car_year
    years = item["car"]["car_year"]
    print('The {} years is {} '.format(item["car"]["car_make"],years))

    if years not in car_years:
      #add to dictionary
      car_years[years] = item["total_sales"]
    #else if year is the same, sum up to total_sales
    else:
      car_years[years] += item["total_sales"]
  # print('car_years is  year : sales number',car_years)  
  popular_year_count, popular_year = max(zip(car_years.values(), car_years.keys()))  # get the most popular car year

  # print(popular_year_count)  
  # print(popular_year)
  # print(car_years)
  #call format_car definition
  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(format_car(max_sales["car"]),max_sales["total_sales"]),
    "The most popular year was {} with {} sales".format(popular_year,popular_year_count)
  ]
  # print(summary)
  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data

#step 1
def main(argv):
  """Process the JSON data and generate a full report out of it."""
  # data = load_data("car_sales.json")
  data = load_data("G:/我的雲端硬碟/Git/Google_Crash_Course_On_Python/Automating-Real-World-Tasks-with-Python/W3/LAB/car_sales.json")
  # print(data)
  #Call process_data definition
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report

  # TODO: send the PDF report as an email attachment


if __name__ == "__main__":
  main(sys.argv)
 